@extends('layouts.app')

@section('title', 'Maps Management')
@section('header', 'Maps Management')

@section('content')

<!-- Map Container with integrated controls -->
<div class="relative bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
    
    <!-- Loading Indicator -->
    <div id="mapLoader" class="absolute inset-0 bg-gray-50 flex items-center justify-center z-50">
        <div class="flex items-center gap-3">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span class="text-gray-600 font-medium">Loading map...</span>
        </div>
    </div>
    
    <!-- Map -->
    <div id="map" class="h-screen w-full"></div>
    
    <!-- Top Control Panel - Integrated into map -->
    <div class="absolute top-4 left-4 right-4 z-20">
        <div class="bg-white/95 backdrop-blur-sm rounded-xl shadow-lg border border-gray-200/50 p-4">
            <div class="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                
                <!-- Left: Map Settings -->
                <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                    <!-- Scope -->
                    <div class="flex items-center gap-2">
                        <label for="mapScope" class="text-sm font-medium text-gray-700 whitespace-nowrap">üó∫Ô∏è</label>
                        <select id="mapScope" class="border border-gray-300 rounded-lg px-3 py-1.5 text-sm bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                            <option value="bukidnon" selected>Bukidnon Province</option>
                            <option value="all">All Philippines</option>
                        </select>
                    </div>

                    <!-- Style -->
                    <div class="flex items-center gap-2">
                        <label for="mapStyle" class="text-sm font-medium text-gray-700 whitespace-nowrap">üé®</label>
                        <select id="mapStyle" class="border border-gray-300 rounded-lg px-3 py-1.5 text-sm bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                            <option value="light" selected>Light</option>
                            <option value="dark">Dark</option>
                            <option value="satellite">Satellite</option>
                        </select>
                    </div>
                </div>

                <!-- Center: Status -->
                <div class="flex items-center gap-3 text-sm">
                    <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        <span class="font-medium text-gray-800" id="currentScope">Bukidnon</span>
                    </div>
                    <div class="text-gray-500">|</div>
                    <span class="text-gray-600">Updated: <span id="lastUpdate" class="text-gray-800">Now</span></span>
                </div>

                <!-- Right: Weather Layers -->
                <div class="flex items-center gap-2">
                    <span class="text-sm font-medium text-gray-700">üå¶Ô∏è</span>
                    <div class="flex gap-2">
                        <button id="toggleTemp" class="weather-btn bg-orange-100 text-orange-700 border border-orange-200 hover:bg-orange-200" data-layer="temp">
                            üå°Ô∏è Temp
                        </button>
                        <button id="toggleStorm" class="weather-btn bg-purple-100 text-purple-700 border border-purple-200 hover:bg-purple-200" data-layer="storm">
                            üå©Ô∏è Storm
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Info Panel - Integrated into map -->
    <div class="absolute bottom-4 left-4 right-4 z-20">
        <div class="bg-white/95 backdrop-blur-sm rounded-xl shadow-lg border border-gray-200/50 p-4">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <!-- Legend -->
                <div>
                    <h3 class="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                        üó∫Ô∏è Legend
                    </h3>
                    <div class="space-y-1 text-xs text-gray-600">
                        <div class="flex items-center gap-2">
                            <div class="w-4 h-2 bg-gradient-to-r from-blue-500 to-red-500 rounded opacity-60"></div>
                            <span>Temperature</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <div class="w-4 h-2 bg-purple-400 rounded opacity-60"></div>
                            <span>Precipitation</span>
                        </div>
                    </div>
                </div>

                <!-- Controls -->
                <div>
                    <h3 class="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                        üéÆ Controls
                    </h3>
                    <div class="space-y-1 text-xs text-gray-600">
                        <div>üñ±Ô∏è Drag to pan</div>
                        <div>üîç Scroll to zoom</div>
                        <div>üìç Click for weather</div>
                    </div>
                </div>

                <!-- Tips -->
                <div>
                    <h3 class="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                        üí° Tip
                    </h3>
                    <div class="text-xs text-blue-700 bg-blue-50 rounded-lg p-2">
                        Click anywhere on the map to get detailed weather information for that location!
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Weather Info Panel - Slides in from right when marker is clicked -->
    <div id="weatherPanel" class="absolute top-20 right-4 w-80 bg-white/95 backdrop-blur-sm rounded-xl shadow-lg border border-gray-200/50 transform translate-x-full transition-transform duration-300 ease-in-out z-30">
        <div class="p-4">
            <div class="flex items-center justify-between mb-3">
                <h3 class="font-bold text-gray-800">Weather Information</h3>
                <button id="closeWeatherPanel" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="weatherContent">
                <!-- Weather data will be inserted here -->
            </div>
        </div>
    </div>

</div>

@endsection


@push('scripts')
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
.weather-btn {
    @apply px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-200 cursor-pointer select-none;
}

.weather-btn.active {
    @apply shadow-lg transform scale-105 ring-2 ring-offset-2;
}

.weather-btn.active[data-layer="temp"] {
    @apply bg-orange-500 text-white ring-orange-300;
}

.weather-btn.active[data-layer="storm"] {
    @apply bg-purple-500 text-white ring-purple-300;
}

.weather-btn:hover {
    @apply shadow-md transform scale-102;
}

/* Custom map controls styling */
.leaflet-control-layers {
    background: rgba(255, 255, 255, 0.95) !important;
    backdrop-filter: blur(10px);
    border-radius: 12px !important;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1) !important;
    border: 1px solid rgba(229, 231, 235, 0.5) !important;
}

.leaflet-control-zoom {
    border-radius: 12px !important;
    overflow: hidden;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1) !important;
    border: 1px solid rgba(229, 231, 235, 0.3) !important;
}

.leaflet-control-zoom a {
    background: rgba(255, 255, 255, 0.95) !important;
    backdrop-filter: blur(10px);
    color: #374151 !important;
    font-weight: 600;
    transition: all 0.2s ease;
    border: none !important;
}

.leaflet-control-zoom a:hover {
    background: #f3f4f6 !important;
    transform: scale(1.05);
}

/* Remove default leaflet popup styling - we'll use our custom panel */
.leaflet-popup-pane {
    display: none !important;
}

.custom-loading-marker,
.custom-weather-marker,
.custom-error-marker {
    background: transparent !important;
    border: none !important;
}

.custom-loading-marker div,
.custom-weather-marker div,
.custom-error-marker div {
    animation: bounce 1.5s infinite;
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-8px);
    }
    60% {
        transform: translateY(-4px);
    }
}

/* Weather panel animations */
.weather-panel-enter {
    transform: translateX(0);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    #weatherPanel {
        right: 4px;
        left: 4px;
        width: auto;
        top: 100px;
    }
    
    #weatherPanel.weather-panel-enter {
        transform: translateY(0);
    }
    
    #weatherPanel {
        transform: translateY(100%);
    }
}

/* Loading animation */
@keyframes pulse-dot {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 1; }
}

.animate-pulse-dot {
    animation: pulse-dot 2s infinite;
}

/* Gradient backgrounds for weather data */
.temp-gradient {
    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
}

.storm-gradient {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.wind-gradient {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
}
</style>

<script>
const openWeatherKey = "{{ env('OPENWEATHER_API_KEY') }}";

// Enhanced boundaries with buffer for better UX
const bukidnonBounds = L.latLngBounds([7.2, 124.2], [8.6, 125.9]);
const philippinesBounds = L.latLngBounds([4.0, 115.5], [21.5, 128.0]);

// Initialize map with loading state
const map = L.map('map', {
    zoomControl: false,
    attributionControl: false,
    maxBoundsViscosity: 1.0
}).setView([7.9, 125.1], 10);

// Add custom zoom control positioned to avoid our panels
L.control.zoom({
    position: 'bottomright'
}).addTo(map);

// Enhanced base layers
const baseLayers = {
    light: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors',
        maxZoom: 18
    }),
    dark: L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; OSM &copy; CARTO',
        maxZoom: 18
    }),
    satellite: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: '&copy; Esri &copy; DigitalGlobe',
        maxZoom: 18
    })
};

// Start with light theme
let currentBaseLayer = baseLayers.light;
currentBaseLayer.addTo(map);

// Weather overlay layers with enhanced styling
const weatherLayers = {
    clouds: L.tileLayer(`https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=${openWeatherKey}`, {
        opacity: 0.4,
        attribution: 'Weather data ¬© OpenWeatherMap'
    }),
    temp: L.tileLayer(`https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=${openWeatherKey}`, {
        opacity: 0.6,
        attribution: 'Weather data ¬© OpenWeatherMap'
    }),
    precipitation: L.tileLayer(`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=${openWeatherKey}`, {
        opacity: 0.7,
        attribution: 'Weather data ¬© OpenWeatherMap'
    }),
    wind: L.tileLayer(`https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=${openWeatherKey}`, {
        opacity: 0.6,
        attribution: 'Weather data ¬© OpenWeatherMap'
    })
};

// Storm layer group
const stormLayer = L.layerGroup([weatherLayers.precipitation, weatherLayers.wind]);

// Track active weather layers
let activeWeatherLayers = new Set();

// Set initial bounds
map.setMaxBounds(bukidnonBounds);

// Hide loader when map is ready
map.whenReady(function() {
    setTimeout(() => {
        document.getElementById('mapLoader').style.display = 'none';
        updateLastUpdated();
    }, 1000);
});

// Enhanced scope toggle
document.getElementById('mapScope').addEventListener('change', function() {
    const scope = this.value;
    const scopeDisplay = document.getElementById('currentScope');
    
    if (scope === 'bukidnon') {
        map.flyTo([7.9, 125.1], 10, { duration: 1.5 });
        map.setMaxBounds(bukidnonBounds);
        scopeDisplay.textContent = 'Bukidnon Province';
    } else {
        map.flyTo([12.5, 122.5], 6, { duration: 1.5 });
        map.setMaxBounds(philippinesBounds);
        scopeDisplay.textContent = 'All Philippines';
    }
    
    closeWeatherPanel();
    updateLastUpdated();
});

// Map style switcher
document.getElementById('mapStyle').addEventListener('change', function() {
    const style = this.value;
    
    // Remove current base layer
    map.removeLayer(currentBaseLayer);
    
    // Add new base layer
    currentBaseLayer = baseLayers[style];
    currentBaseLayer.addTo(map);
    
    updateLastUpdated();
});

// Weather layer toggle functionality
document.querySelectorAll('.weather-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const layerType = this.dataset.layer;
        
        if (this.classList.contains('active')) {
            // Remove layer
            this.classList.remove('active');
            activeWeatherLayers.delete(layerType);
            
            if (layerType === 'storm') {
                map.removeLayer(stormLayer);
            } else {
                map.removeLayer(weatherLayers[layerType]);
            }
        } else {
            // Add layer
            this.classList.add('active');
            activeWeatherLayers.add(layerType);
            
            if (layerType === 'storm') {
                stormLayer.addTo(map);
            } else {
                weatherLayers[layerType].addTo(map);
            }
        }
        
        updateLastUpdated();
    });
});

// Weather panel management
const weatherPanel = document.getElementById('weatherPanel');
const weatherContent = document.getElementById('weatherContent');
const closeBtn = document.getElementById('closeWeatherPanel');

function showWeatherPanel() {
    weatherPanel.classList.remove('translate-x-full');
    weatherPanel.classList.add('weather-panel-enter');
}

function closeWeatherPanel() {
    weatherPanel.classList.add('translate-x-full');
    weatherPanel.classList.remove('weather-panel-enter');
}

// Close panel button
closeBtn.addEventListener('click', closeWeatherPanel);

// Close panel when clicking outside (optional)
document.addEventListener('click', function(e) {
    if (!weatherPanel.contains(e.target) && !e.target.closest('.custom-weather-marker') && weatherPanel.classList.contains('weather-panel-enter')) {
        // Uncomment to enable click-outside-to-close
        // closeWeatherPanel();
    }
});

// Update timestamp
function updateLastUpdated() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
    });
    document.getElementById('lastUpdate').textContent = timeString;
}

// Click handler for weather data
let clickMarker = null;

map.on('click', async function(e) {
    const lat = e.latlng.lat.toFixed(4);
    const lng = e.latlng.lng.toFixed(4);
    
    // Remove previous click marker
    if (clickMarker) {
        map.removeLayer(clickMarker);
    }
    
    // Show loading in weather panel
    weatherContent.innerHTML = `
        <div class="flex items-center justify-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span class="ml-3 text-gray-600">Loading weather data...</span>
        </div>
    `;
    showWeatherPanel();
    
    // Add temporary marker with loading state
    clickMarker = L.marker([lat, lng], {
        icon: L.divIcon({
            html: `<div class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg animate-pulse">üìç</div>`,
            className: 'custom-loading-marker',
            iconSize: [32, 32],
            iconAnchor: [16, 16]
        })
    }).addTo(map);
    
    try {
        // Fetch weather data for clicked location
        const weatherData = await fetchWeatherData(lat, lng);
        
        // Update marker with weather info
        clickMarker.setIcon(L.divIcon({
            html: `<div class="bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center text-lg shadow-lg border-2 border-white">üìç</div>`,
            className: 'custom-weather-marker',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        }));
        
        // Create detailed weather panel content
        weatherContent.innerHTML = createWeatherPanelContent(weatherData, lat, lng);
        
    } catch (error) {
        console.error('Error fetching weather data:', error);
        
        // Show error in weather panel
        clickMarker.setIcon(L.divIcon({
            html: `<div class="bg-red-500 text-white rounded-full w-10 h-10 flex items-center justify-center text-lg shadow-lg border-2 border-white">‚ùå</div>`,
            className: 'custom-error-marker',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
        }));
        
        weatherContent.innerHTML = `
            <div class="text-center py-6">
                <div class="text-red-500 text-4xl mb-3">‚ö†Ô∏è</div>
                <h3 class="font-bold text-gray-800 mb-2">Weather Data Unavailable</h3>
                <div class="space-y-2 text-sm text-gray-600">
                    <div>Latitude: <span class="font-mono">${lat}¬∞</span></div>
                    <div>Longitude: <span class="font-mono">${lng}¬∞</span></div>
                    <div class="text-xs bg-red-50 text-red-600 p-3 rounded-lg mt-3">
                        Unable to fetch weather data. Please check your internet connection or try again later.
                    </div>
                </div>
            </div>
        `;
    }
});

// Fetch weather data from OpenWeatherMap API
async function fetchWeatherData(lat, lng) {
    if (!openWeatherKey) {
        throw new Error('OpenWeatherMap API key not configured');
    }
    
    const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${openWeatherKey}&units=metric`
    );
    
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
}

function createWeatherPanelContent(weatherData, lat, lng) {
    // Basic weather info
    const temp = Math.round(weatherData.main.temp);
    const feelsLike = Math.round(weatherData.main.feels_like);
    const humidity = weatherData.main.humidity;
    const pressure = weatherData.main.pressure;
    const windSpeed = Math.round((weatherData.wind?.speed || 0) * 3.6); // m/s ‚Üí km/h
    const windDir = weatherData.wind?.deg || 0;
    const visibility = weatherData.visibility ? (weatherData.visibility / 1000).toFixed(1) : 'N/A';
    const cloudiness = weatherData.clouds?.all || 0;
    const precipitation = weatherData.rain?.['1h'] || weatherData.snow?.['1h'] || 0;
    const weatherMain = weatherData.weather?.[0]?.main || '';
    const weatherDesc = weatherData.weather?.[0]?.description || 'No data';
    const weatherIcon = weatherData.weather?.[0]?.icon || '01d';
    
    const locationName = weatherData.name || 'Unknown Location';
    const country = weatherData.sys?.country || '';

    // Determine storm status using multiple factors
    function determineStormStatus() {
        let status = 'None';
        let color = 'text-green-600';
        let bg = 'bg-green-50';

        if (precipitation > 10 || windSpeed > 70 || weatherMain.toLowerCase().includes('thunder') || pressure < 1000) {
            status = 'Severe';
            color = 'text-red-600';
            bg = 'bg-red-50';
        } else if (precipitation > 5 || windSpeed > 40 || weatherMain.toLowerCase().includes('rain') || pressure < 1010) {
            status = 'Moderate';
            color = 'text-orange-600';
            bg = 'bg-orange-50';
        } else if (precipitation > 0 || windSpeed > 20) {
            status = 'Light';
            color = 'text-yellow-600';
            bg = 'bg-yellow-50';
        }

        return { status, color, bg };
    }

    const { status: stormStatus, color: stormColor, bg: stormBg } = determineStormStatus();

    // Helper: Wind direction
    function getWindDirection(deg) {
        const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
        return directions[Math.round(deg / 22.5) % 16];
    }

    // Panel content
    return `
    <div class="space-y-4">
        <!-- Header -->
        <div class="flex items-center justify-between">
            <div>
                <h3 class="font-bold text-gray-800 text-lg">${locationName}</h3>
                ${country ? `<p class="text-sm text-gray-500">${country}</p>` : ''}
            </div>
            <img src="https://openweathermap.org/img/wn/${weatherIcon}@2x.png" 
                 alt="${weatherDesc}" class="w-16 h-16" />
        </div>

        <!-- Main Weather Stats -->
        <div class="grid grid-cols-2 gap-3">
            <div class="temp-gradient p-4 rounded-xl text-center">
                <div class="text-2xl font-bold text-gray-800">${temp}¬∞C</div>
                <div class="text-sm text-gray-600">Feels like ${feelsLike}¬∞C</div>
                <div class="text-xs text-gray-500 mt-1">Temperature</div>
            </div>
            <div class="${stormBg} p-4 rounded-xl text-center">
                <div class="text-2xl font-bold ${stormColor}">${stormStatus}</div>
                <div class="text-sm text-gray-600">${precipitation.toFixed(1)} mm / ${windSpeed} km/h</div>
                <div class="text-xs text-gray-500 mt-1">Storm Status</div>
            </div>
        </div>

        <!-- Detailed Stats -->
        <div class="space-y-3">
            <div class="bg-gray-50 p-3 rounded-lg">
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <div class="text-gray-500 text-xs">Humidity</div>
                        <div class="font-medium text-blue-600">${humidity}%</div>
                    </div>
                    <div>
                        <div class="text-gray-500 text-xs">Pressure</div>
                        <div class="font-medium text-blue-600">${pressure} hPa</div>
                    </div>
                    <div>
                        <div class="text-gray-500 text-xs">Wind</div>
                        <div class="font-medium text-blue-600">${windSpeed} km/h ${getWindDirection(windDir)}</div>
                    </div>
                    <div>
                        <div class="text-gray-500 text-xs">Visibility</div>
                        <div class="font-medium text-blue-600">${visibility} km</div>
                    </div>
                </div>
            </div>

            <div class="bg-blue-50 p-3 rounded-lg">
                <div class="text-sm text-blue-700 capitalize font-medium mb-1">${weatherDesc}</div>
                <div class="text-xs text-blue-600">Cloudiness: ${cloudiness}%</div>
            </div>
        </div>

        <!-- Location Info -->
        <div class="border-t pt-3 space-y-1 text-xs text-gray-500">
            <div class="flex justify-between">
                <span>üìç Latitude:</span>
                <span class="font-mono text-gray-700">${lat}¬∞</span>
            </div>
            <div class="flex justify-between">
                <span>üìç Longitude:</span>
                <span class="font-mono text-gray-700">${lng}¬∞</span>
            </div>
        </div>

        <!-- Close Button -->
        <button onclick="closeWeatherPanel()" class="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
            Close
        </button>
    </div>
    `;
}




// Auto-refresh weather data every 5 minutes
setInterval(() => {
    // Refresh active weather layers
    activeWeatherLayers.forEach(layerType => {
        if (layerType === 'storm') {
            map.removeLayer(stormLayer);
            stormLayer.addTo(map);
        } else if (weatherLayers[layerType]) {
            map.removeLayer(weatherLayers[layerType]);
            weatherLayers[layerType].addTo(map);
        }
    });
    updateLastUpdated();
}, 300000); // 5 minutes

// Add attribution
L.control.attribution({
    position: 'bottomleft'
}).addTo(map).addAttribution('Weather ¬© OpenWeatherMap');

// Make closeWeatherPanel globally available
window.closeWeatherPanel = closeWeatherPanel;

console.log('üó∫Ô∏è Enhanced Windy-style Maps Management loaded successfully!');
</script>
@endpush