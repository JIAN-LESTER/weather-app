@extends('layouts.app')

@section('title', 'Dashboard')
@section('header', 'Dashboard')

@section('content')
<div class="min-h-screen bg-gradient-to-br">
    <!-- Header Section -->
    <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center p-6 space-y-4 lg:space-y-0">
        <div class="flex-1">
            <h1 class="text-3xl lg:text-4xl font-bold text-gray-800 mb-2">
                Welcome, {{ auth()->user()->fname ?? 'User' }}
            </h1>

            <div class="flex flex-wrap items-center text-gray-800 text-sm lg:text-base space-x-2">
                <i class="fas fa-map-marker-alt"></i>
                <span id="location" class="font-medium text-gray-800">Loading location...</span>
                <span class="hidden sm:inline text-gray-800">•</span>
                <span id="current-date" class="hidden sm:inline text-gray-800"></span>
            </div>
        </div>
        
        <div class="flex items-center space-x-4 w-full lg:w-auto">
            <div class="relative flex-1 lg:flex-initial">
                <input 
                    type="text" 
                    id="locationSearch" 
                    placeholder="Search location..." 
                    class="w-full lg:w-80 px-4 py-3 pr-12 bg-white/10 backdrop-blur-md border border-white/20 rounded-2xl text-gray-800 placeholder-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent"
                />
                <i class="fas fa-search absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-800"></i>
            </div>
           
            <button class="text-gray-800/70 hover:text-gray-800 transition-colors p-2">
                <i class="fas fa-cog text-xl"></i>
            </button>
        </div>
    </div>

    <!-- Weather Dashboard Content -->
    <div class="px-6 pb-6">
        <div id="weatherDashboard" class="space-y-6">
            <!-- Loading State -->
           <div id="loadingState" class="text-center py-20">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-white/20 border-t-blue-400 mb-4"></div>
                <p class="text-gray-800/70 text-lg">Loading weather data...</p>
            </div>


            <!-- Main Weather Content (Hidden Initially) -->
            <div id="weatherContent" class="hidden space-y-6">
                <!-- First Row: Temperature & Precipitation Cards -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Temperature Card -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-xl font-semibold text-gray-800">Current Temperature</h3>
                            <div class="text-gray-800/60 text-sm">°C | °F</div>
                        </div>

                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-6">
                                <div class="text-8xl" id="mainWeatherIcon">
                                    <i class="fas fa-cloud-rain text-blue-300"></i>
                                </div>
                                <div>
                                    <div class="text-6xl lg:text-7xl font-light text-gray-800" id="mainTemp">28°</div>
                                    <div class="text-gray-800/80 text-lg" id="feelsLike">Feels like 32°</div>
                                    <div class="text-gray-800/60 text-sm mt-2" id="tempRange">H: 32° L: 24°</div>
                                </div>
                            </div>
                            
                            <div class="text-right">
                                <p id="weatherDescription" class="text-xl text-gray-800 capitalize mb-2">Heavy Rain</p>
                                <div class="text-gray-800/80 text-sm" id="currentDay"></div>
                                <div class="text-gray-800/60 text-sm" id="currentDate"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Precipitation Card with Mini Map -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-xl font-semibold text-gray-800">Precipitation</h3>
                            <i class="fas fa-cloud-rain text-blue-400 text-xl"></i>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 h-full">
                            <!-- Precipitation Details -->
                            <div class="space-y-4">
                                <div class="bg-white/5 rounded-2xl p-4">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-gray-800/80 text-sm">Rain Chance</span>
                                        <i class="fas fa-tint text-blue-400"></i>
                                    </div>
                                    <div class="text-3xl font-semibold text-gray-800">
                                        <span id="rainChance">90</span><span class="text-lg">%</span>
                                    </div>
                                </div>

                                <div class="bg-white/5 rounded-2xl p-4">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-gray-800/80 text-sm">Rainfall</span>
                                        <i class="fas fa-cloud-rain text-blue-400"></i>
                                    </div>
                                    <div class="text-2xl font-semibold text-gray-800">
                                        <span id="rainfall">2.5</span> <span class="text-sm font-normal">mm/h</span>
                                    </div>
                                </div>

                                <div class="bg-white/5 rounded-2xl p-4">
                                    <div class="flex items-center justify-between mb-2">
                                        <span class="text-gray-800/80 text-sm">Humidity</span>
                                        <i class="fas fa-water text-blue-400"></i>
                                    </div>
                                    <div class="text-2xl font-semibold text-gray-800">
                                        <span id="humidity">85</span><span class="text-sm">%</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Mini Map -->
                            <div class="bg-white/5 rounded-2xl p-4 flex flex-col">
                                <div class="text-gray-800/80 text-sm mb-2">Weather Map</div>
                                <div id="miniMap" class="flex-1 min-h-[200px] bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-xl relative overflow-hidden">
                                    <!-- Map will be loaded here -->
                                    <div class="absolute inset-0 flex items-center justify-center">
                                        <div class="text-gray-800/60 text-center">
                                            <i class="fas fa-map text-3xl mb-2"></i>
                                            <div class="text-sm">Weather Radar</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Second Row: Today's Hourly Forecast -->
                <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 lg:p-8 border border-white/20 shadow-2xl">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-800 mb-4 sm:mb-0">Today's Hourly Forecast</h3>
                        <button class="text-gray-800/80 hover:text-gray-800 transition-colors text-sm flex items-center space-x-1">
                            <span>See All</span>
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <div id="hourlyForecast" class="overflow-x-auto">
                        <div class="flex space-x-4 min-w-max pb-2">
                            <!-- Hourly forecast items will be populated here -->
                        </div>
                    </div>
                </div>

                <!-- Third Row: 5-Day Forecast -->
                <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 lg:p-8 border border-white/20 shadow-2xl">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-800 mb-4 sm:mb-0">5-Day Forecast</h3>
                        <button class="text-gray-800/80 hover:text-gray-800 transition-colors text-sm flex items-center space-x-1">
                            <span>Extended Forecast</span>
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <div id="dailyForecast" class="space-y-4">
                        <!-- Daily forecast items will be populated here -->
                    </div>
                </div>

                <!-- Weather Details Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <!-- Wind Status -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-gray-800/80 text-sm">Wind Status</span>
                            <i class="fas fa-wind text-green-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-gray-800 mb-2">
                            <span id="windSpeed">7.9</span> <span class="text-lg font-normal">km/h</span>
                        </div>
                        <div class="text-gray-800/60 text-sm">
                            <span id="windDirection">SW</span> • <span id="windGust">12.5 km/h</span> gusts
                        </div>
                    </div>

                    <!-- UV Index -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-gray-800/80 text-sm">UV Index</span>
                            <i class="fas fa-sun text-yellow-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-gray-800 mb-2">
                            <span id="uvIndex">4</span> <span class="text-lg font-normal">UV</span>
                        </div>
                        <div class="text-gray-800/60 text-sm" id="uvStatus">Moderate</div>
                    </div>

                    <!-- Visibility -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-gray-800/80 text-sm">Visibility</span>
                            <i class="fas fa-eye text-purple-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-gray-800 mb-2">
                            <span id="visibility">10</span> <span class="text-lg font-normal">km</span>
                        </div>
                        <div class="text-gray-800/60 text-sm">Clear visibility</div>
                    </div>

                    <!-- Pressure -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-gray-800/80 text-sm">Pressure</span>
                            <i class="fas fa-tachometer-alt text-red-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-gray-800 mb-2">
                            <span id="pressure">1013</span> <span class="text-lg font-normal">hPa</span>
                        </div>
                        <div class="text-gray-800/60 text-sm" id="pressureStatus">Normal</div>
                    </div>
                </div> class="text-white/80 hover:text-white transition-colors text-sm flex items-center space-x-1">
                            <span>Extended Forecast</span>
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <div id="dailyForecast" class="space-y-4">
                        <!-- Daily forecast items will be populated here -->
                    </div>
                </div>

                <!-- Weather Details Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <!-- Wind Status -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-white/80 text-sm">Wind Status</span>
                            <i class="fas fa-wind text-green-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-white mb-2">
                            <span id="windSpeed">7.9</span> <span class="text-lg font-normal">km/h</span>
                        </div>
                        <div class="text-white/60 text-sm">
                            <span id="windDirection">SW</span> • <span id="windGust">12.5 km/h</span> gusts
                        </div>
                    </div>

                    <!-- UV Index -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-white/80 text-sm">UV Index</span>
                            <i class="fas fa-sun text-yellow-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-white mb-2">
                            <span id="uvIndex">4</span> <span class="text-lg font-normal">UV</span>
                        </div>
                        <div class="text-white/60 text-sm" id="uvStatus">Moderate</div>
                    </div>

                    <!-- Visibility -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-white/80 text-sm">Visibility</span>
                            <i class="fas fa-eye text-purple-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-white mb-2">
                            <span id="visibility">10</span> <span class="text-lg font-normal">km</span>
                        </div>
                        <div class="text-white/60 text-sm">Clear visibility</div>
                    </div>

                    <!-- Pressure -->
                    <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all duration-500">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-white/80 text-sm">Pressure</span>
                            <i class="fas fa-tachometer-alt text-red-400 text-xl"></i>
                        </div>
                        <div class="text-3xl font-semibold text-white mb-2">
                            <span id="pressure">1013</span> <span class="text-lg font-normal">hPa</span>
                        </div>
                        <div class="text-white/60 text-sm" id="pressureStatus">Normal</div>
                    </div>
                </div>
            </div>

            <!-- Error State -->
            <div id="errorState" class="hidden text-center py-20">
                <div class="text-red-400 text-6xl mb-4">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3 class="text-white text-xl mb-2">Unable to Load Weather Data</h3>
                <p class="text-white/80 mb-6">Please check your internet connection and try again.</p>
                <button onclick="location.reload()" class="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-full transition-colors shadow-lg">
                    Try Again
                </button>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function () {
    const weatherDashboard = document.getElementById('weatherDashboard');
    const loadingState = document.getElementById('loadingState');
    const weatherContent = document.getElementById('weatherContent');
    const errorState = document.getElementById('errorState');

    // OpenWeatherMap API configuration (without One Call API)
    const API_KEY = "{{ env('OPENWEATHER_API_KEY') }}"; // Replace with your actual API key
    const BASE_URL = 'https://api.openweathermap.org/data/2.5';
    
    // Generate mock forecast data since we don't have One Call API
    function generateHourlyForecast(baseTemp, baseIcon, baseDescription) {
        const forecast = [];
        const now = new Date();
        
        for (let i = 0; i < 12; i++) {
            const hour = new Date(now.getTime() + i * 60 * 60 * 1000);
            const tempVariation = Math.random() * 6 - 3; // ±3 degrees
            const temp = Math.round(baseTemp + tempVariation);
            const pop = Math.max(0, Math.min(100, Math.round(Math.random() * 100)));
            
            forecast.push({
                dt: hour.getTime() / 1000,
                temp: temp,
                weather: [{ icon: baseIcon, description: baseDescription }],
                pop: pop / 100
            });
        }
        
        return forecast;
    }
    
    function generateDailyForecast(baseTemp, baseIcon, baseDescription) {
        const forecast = [];
        const today = new Date();
        
        for (let i = 0; i < 5; i++) {
            const day = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);
            const tempVariation = Math.random() * 8 - 4; // ±4 degrees
            const maxTemp = Math.round(baseTemp + tempVariation + 3);
            const minTemp = Math.round(baseTemp + tempVariation - 3);
            const pop = Math.max(0, Math.min(100, Math.round(Math.random() * 100)));
            
            // Vary icons for different days
            const icons = ['01d', '02d', '10d', '04d', '11d'];
            const descriptions = ['Clear', 'Partly Cloudy', 'Rain', 'Cloudy', 'Thunderstorm'];
            const iconIndex = i % icons.length;
            
            forecast.push({
                dt: day.getTime() / 1000,
                temp: {
                    max: maxTemp,
                    min: minTemp
                },
                weather: [{ 
                    icon: i === 0 ? baseIcon : icons[iconIndex], 
                    description: i === 0 ? baseDescription : descriptions[iconIndex]
                }],
                pop: pop / 100
            });
        }
        
        return forecast;
    }

    // Weather icon mapping
    const weatherIcons = {
        '01d': 'fas fa-sun text-yellow-400',
        '01n': 'fas fa-moon text-blue-300',
        '02d': 'fas fa-cloud-sun text-yellow-400',
        '02n': 'fas fa-cloud-moon text-blue-300',
        '03d': 'fas fa-cloud text-gray-300',
        '03n': 'fas fa-cloud text-gray-300',
        '04d': 'fas fa-clouds text-gray-400',
        '04n': 'fas fa-clouds text-gray-400',
        '09d': 'fas fa-cloud-showers-heavy text-blue-400',
        '09n': 'fas fa-cloud-showers-heavy text-blue-400',
        '10d': 'fas fa-cloud-rain text-blue-400',
        '10n': 'fas fa-cloud-rain text-blue-400',
        '11d': 'fas fa-bolt text-yellow-500',
        '11n': 'fas fa-bolt text-yellow-500',
        '13d': 'fas fa-snowflake text-blue-200',
        '13n': 'fas fa-snowflake text-blue-200',
        '50d': 'fas fa-smog text-gray-400',
        '50n': 'fas fa-smog text-gray-400'
    };

    // Set current date and time
    const now = new Date();
    document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', {
        weekday: 'long',
        day: '2-digit',
        month: 'short',
        year: 'numeric'
    });

    document.getElementById('currentDay').textContent = now.toLocaleDateString('en-US', { weekday: 'long' });
    document.getElementById('currentDate').textContent = now.toLocaleDateString('en-US', {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
    });

    function getWeatherIcon(iconCode) {
        return weatherIcons[iconCode] || 'fas fa-question text-gray-400';
    }

    function getWindDirection(degrees) {
        const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
        return directions[Math.round(degrees / 22.5) % 16];
    }

    function getUVStatus(uvIndex) {
        if (uvIndex <= 2) return 'Low';
        if (uvIndex <= 5) return 'Moderate';
        if (uvIndex <= 7) return 'High';
        if (uvIndex <= 10) return 'Very High';
        return 'Extreme';
    }

    function getPressureStatus(pressure) {
        if (pressure < 1000) return 'Low';
        if (pressure > 1020) return 'High';
        return 'Normal';
    }

    function displayCurrentWeather(weather) {
        const temp = Math.round(weather.main.temp);
        const feelsLike = Math.round(weather.main.feels_like);
        const tempMin = Math.round(weather.main.temp_min);
        const tempMax = Math.round(weather.main.temp_max);
        const humidity = weather.main.humidity;
        const pressure = weather.main.pressure;
        const wind = Math.round(weather.wind.speed * 3.6);
        const windDeg = weather.wind.deg || 0;
        const windGust = weather.wind.gust ? Math.round(weather.wind.gust * 3.6) : wind;
        const description = weather.weather[0]?.description ?? 'No data';
        const icon = weather.weather[0]?.icon ?? '01d';
        const visibility = Math.round((weather.visibility || 10000) / 1000);
        const rainAmount = weather.rain?.['1h'] || 0;
        const locationName = weather.name ?? 'Unknown';
        const country = weather.sys?.country ?? '';

        // Update location
        document.getElementById('location').textContent = `${locationName}, ${country}`;

        // Update main weather info
        document.getElementById('mainTemp').textContent = `${temp}°`;
        document.getElementById('feelsLike').textContent = `Feels like ${feelsLike}°`;
        document.getElementById('tempRange').textContent = `H: ${tempMax}° L: ${tempMin}°`;
        document.getElementById('weatherDescription').textContent = description.charAt(0).toUpperCase() + description.slice(1);
        document.getElementById('mainWeatherIcon').innerHTML = `<i class="${getWeatherIcon(icon)}"></i>`;

        // Update precipitation details
        const rainChance = rainAmount > 0 ? 100 : (humidity > 80 ? Math.round(humidity * 0.8) : Math.round(humidity * 0.3));
        document.getElementById('rainChance').textContent = rainChance;
        document.getElementById('rainfall').textContent = rainAmount.toFixed(1);
        document.getElementById('humidity').textContent = humidity;

        // Update weather details
        document.getElementById('windSpeed').textContent = (wind).toFixed(1);
        document.getElementById('windDirection').textContent = getWindDirection(windDeg);
        document.getElementById('windGust').textContent = windGust.toFixed(1);
        document.getElementById('pressure').textContent = pressure;
        document.getElementById('pressureStatus').textContent = getPressureStatus(pressure);
        document.getElementById('visibility').textContent = visibility;
    }

    function displayHourlyForecast(hourlyData) {
        const hourlyForecast = document.getElementById('hourlyForecast').querySelector('.flex');
        
        hourlyForecast.innerHTML = hourlyData.slice(0, 12).map((hour, index) => {
            const time = new Date(hour.dt * 1000);
            const temp = Math.round(hour.temp);
            const icon = hour.weather[0]?.icon || '01d';
            const pop = Math.round((hour.pop || 0) * 100);
            
            return `
                <div class="bg-white/5 rounded-2xl p-4 text-center min-w-[120px] hover:bg-white/10 transition-all duration-300 cursor-pointer">
                    <div class="text-white/80 text-sm mb-2">${index === 0 ? 'Now' : time.getHours().toString().padStart(2, '0') + ':00'}</div>
                    <div class="text-3xl mb-2">
                        <i class="${getWeatherIcon(icon)}"></i>
                    </div>
                    <div class="text-white text-lg font-semibold mb-1">${temp}°</div>
                    ${pop > 0 ? `<div class="text-blue-400 text-xs"><i class="fas fa-tint"></i> ${pop}%</div>` : ''}
                </div>
            `;
        }).join('');
    }

    function displayDailyForecast(dailyData) {
        const dailyForecast = document.getElementById('dailyForecast');
        
        dailyForecast.innerHTML = dailyData.slice(0, 5).map((day, index) => {
            const date = new Date(day.dt * 1000);
            const dayName = index === 0 ? 'Today' : date.toLocaleDateString('en-US', { weekday: 'short' });
            const tempMax = Math.round(day.temp.max);
            const tempMin = Math.round(day.temp.min);
            const icon = day.weather[0]?.icon || '01d';
            const description = day.weather[0]?.description || '';
            const pop = Math.round((day.pop || 0) * 100);
            
            return `
                <div class="flex items-center justify-between p-4 bg-white/5 rounded-2xl hover:bg-white/10 transition-all duration-300 cursor-pointer">
                    <div class="flex items-center space-x-4 flex-1">
                        <div class="w-16 text-white font-medium">${dayName}</div>
                        <div class="text-3xl">
                            <i class="${getWeatherIcon(icon)}"></i>
                        </div>
                        <div class="flex-1">
                            <div class="text-white capitalize">${description}</div>
                            ${pop > 0 ? `<div class="text-blue-400 text-sm"><i class="fas fa-tint"></i> ${pop}%</div>` : ''}
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="text-white text-xl font-semibold">${tempMax}°</div>
                        <div class="text-white/60">${tempMin}°</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    function displayOneCallData(currentWeather) {
        // Generate mock UV Index since we don't have One Call API
        const uvIndex = Math.round(Math.random() * 10);
        document.getElementById('uvIndex').textContent = uvIndex;
        document.getElementById('uvStatus').textContent = getUVStatus(uvIndex);

        // Generate and display hourly forecast
        const hourlyData = generateHourlyForecast(
            Math.round(currentWeather.main.temp),
            currentWeather.weather[0].icon,
            currentWeather.weather[0].description
        );
        displayHourlyForecast(hourlyData);

        // Generate and display daily forecast
        const dailyData = generateDailyForecast(
            Math.round(currentWeather.main.temp),
            currentWeather.weather[0].icon,
            currentWeather.weather[0].description
        );
        displayDailyForecast(dailyData);

        // Initialize mini map
        initMiniMap(currentWeather.coord.lat, currentWeather.coord.lon);
    }

    function initMiniMap(lat, lon) {
        const miniMap = document.getElementById('miniMap');
        
        // Create a simple weather map visualization
        miniMap.innerHTML = `
            <div class="absolute inset-0 bg-gradient-to-br from-blue-500/30 to-purple-500/30 rounded-xl">
                <div class="absolute inset-0 flex items-center justify-center">
                    <div class="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                </div>
                <div class="absolute bottom-2 left-2 text-white/80 text-xs">
                    ${lat.toFixed(2)}°, ${lon.toFixed(2)}°
                </div>
            </div>
        `;
        
        // You can integrate with Leaflet or OpenLayers here for a real map
        // For now, this is a placeholder
    }

    async function fetchWeatherData(lat, lon) {
        try {
            // Fetch current weather
            const currentResponse = await fetch(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);
            const currentWeather = await currentResponse.json();
            
            displayCurrentWeather(currentWeather);
            displayOneCallData(currentWeather);

            // Show content and hide loading
            loadingState.classList.add('hidden');
            weatherContent.classList.remove('hidden');

        } catch (error) {
            console.error('Error fetching weather data:', error);
            showError();
        }
    }

    async function searchLocation(query) {
        try {
            const response = await fetch(`${BASE_URL}/weather?q=${query}&appid=${API_KEY}&units=metric`);
            const weather = await response.json();
            
            if (weather.coord) {
                fetchWeatherData(weather.coord.lat, weather.coord.lon);
            }
        } catch (error) {
            console.error('Error searching location:', error);
            showError();
        }
    }

    function showError() {
        loadingState.classList.add('hidden');
        weatherContent.classList.add('hidden');
        errorState.classList.remove('hidden');
    }

    // Initialize geolocation and weather fetching
    if (!navigator.geolocation) {
        showError();
        return;
    }

    navigator.geolocation.getCurrentPosition(
        (position) => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            fetchWeatherData(lat, lng);
        },
        (error) => {
            console.error('Geolocation error:', error);
            // Fallback to a default location (e.g., General Santos City)
            fetchWeatherData(6.1164, 125.1716);
        },
        {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000 // 5 minutes
        }
    );

    // Search functionality
    document.getElementById('locationSearch').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            const location = this.value.trim();
            if (location) {
                loadingState.classList.remove('hidden');
                weatherContent.classList.add('hidden');
                errorState.classList.add('hidden');
                searchLocation(location);
            }
        }
    });
});
</script>
@endpush

@push('styles')
<style>
    /* Enhanced backdrop blur */
    .backdrop-blur-xl {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
    }
    
    /* Smooth transitions for all interactive elements */
    * {
        transition-property: all;
        transition-duration: 300ms;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    /* Enhanced glassmorphism effect */
    .bg-white\/10 {
        background: rgba(255, 255, 255, 0.1);
        box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
    }

    .bg-white\/5 {
        background: rgba(255, 255, 255, 0.05);
    }

    /* Hover effects */
    .hover\:bg-white\/15:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
        box-shadow: 0 30px 50px rgba(0, 0, 0, 0.15);
    }

    .hover\:bg-white\/10:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    /* Animation for loading spinner */
    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .animate-spin {
        animation: spin 1s linear infinite;
    }

    /* Pulse animation for map marker */
    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    /* Gradient text effects */
    .gradient-text {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    /* Custom focus styles */
    input:focus {
        box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);
    }

    /* Weather card animations */
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .weather-card {
        animation: slideInUp 0.6s ease-out forwards;
    }

    .weather-card:nth-child(1) { animation-delay: 0.1s; }
    .weather-card:nth-child(2) { animation-delay: 0.2s; }
    .weather-card:nth-child(3) { animation-delay: 0.3s; }
    .weather-card:nth-child(4) { animation-delay: 0.4s; }

    /* Mini map styles */
    #miniMap {
        background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.1) 0%, 
            rgba(147, 51, 234, 0.1) 50%, 
            rgba(236, 72, 153, 0.1) 100%);
    }

    /* Weather icon hover effects */
    .weather-icon-hover:hover {
        transform: scale(1.1);
        filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
    }

    /* Glass card border effect */
    .glass-border {
        position: relative;
    }

    .glass-border::before {
        content: '';
        position: absolute;
        inset: 0;
        padding: 1px;
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.2) 0%, 
            rgba(255, 255, 255, 0.05) 50%, 
            rgba(255, 255, 255, 0.1) 100%);
        border-radius: inherit;
        mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
        mask-composite: xor;
        -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
        -webkit-mask-composite: xor;
    }
</style>
@endpush